# Modern UI Dockerfile for PixelProbe

FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    imagemagick \
    libmagic1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . .

# Create necessary directories and ensure static files exist
RUN mkdir -p static/css static/js static/images templates

# Ensure static files are in place
RUN if [ ! -f static/css/desktop.css ]; then echo "/* Desktop CSS placeholder */" > static/css/desktop.css; fi
RUN if [ ! -f static/css/mobile.css ]; then echo "/* Mobile CSS placeholder */" > static/css/mobile.css; fi
RUN if [ ! -f static/css/logo-styles.css ]; then echo "/* Logo CSS placeholder */" > static/css/logo-styles.css; fi
RUN if [ ! -f static/js/app.js ]; then echo "// App JS placeholder" > static/js/app.js; fi

# Set environment variables
ENV USE_MODERN_UI=true
ENV FLASK_APP=app.py
ENV PYTHONUNBUFFERED=1

# Create a sample database for testing
RUN python -c "import os; \
from app import app, db; \
from models import ScanResult; \
from datetime import datetime, timedelta, timezone; \
import random; \
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test_media_checker.db'; \
with app.app_context(): \
    db.create_all(); \
    paths = ['/media/photos/IMG_001.jpg', '/media/photos/IMG_002.jpg', '/media/videos/video_001.mp4', '/media/videos/video_002.mp4']; \
    for path in paths: \
        result = ScanResult(file_path=path, file_size=random.randint(100000, 10000000), file_type='image' if path.endswith('.jpg') else 'video', is_corrupted=random.choice([True, False, False, False]), has_warnings=random.choice([True, False, False]), scan_date=datetime.now(timezone.utc) - timedelta(days=random.randint(0, 30)), scan_status='completed', marked_as_good=False); \
        db.session.add(result); \
    db.session.commit(); \
    print('Test database created with sample data')"

# Use the test database by default
ENV DATABASE_URL=sqlite:///test_media_checker.db

# Expose port
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Run the application
CMD ["python", "app.py"]